// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: protob/kv.proto

package  protob

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MulterClient is the client API for Multer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MulterClient interface {
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*Empty, error)
}

type multerClient struct {
	cc grpc.ClientConnInterface
}

func NewMulterClient(cc grpc.ClientConnInterface) MulterClient {
	return &multerClient{cc}
}

func (c *multerClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/protob.Multer/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multerClient) Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/protob.Multer/Put", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MulterServer is the server API for Multer service.
// All implementations should embed UnimplementedMulterServer
// for forward compatibility
type MulterServer interface {
	Get(context.Context, *GetRequest) (*GetResponse, error)
	Put(context.Context, *PutRequest) (*Empty, error)
}

// UnimplementedMulterServer should be embedded to have forward compatible implementations.
type UnimplementedMulterServer struct {
}

func (UnimplementedMulterServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedMulterServer) Put(context.Context, *PutRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}

// UnsafeMulterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MulterServer will
// result in compilation errors.
type UnsafeMulterServer interface {
	mustEmbedUnimplementedMulterServer()
}

func RegisterMulterServer(s grpc.ServiceRegistrar, srv MulterServer) {
	s.RegisterService(&Multer_ServiceDesc, srv)
}

func _Multer_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MulterServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protob.Multer/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MulterServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Multer_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MulterServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protob.Multer/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MulterServer).Put(ctx, req.(*PutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Multer_ServiceDesc is the grpc.ServiceDesc for Multer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Multer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protob.Multer",
	HandlerType: (*MulterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Multer_Get_Handler,
		},
		{
			MethodName: "Put",
			Handler:    _Multer_Put_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protob/kv.proto",
}

// AddHelperClient is the client API for AddHelper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AddHelperClient interface {
	Sum(ctx context.Context, in *MultRequest, opts ...grpc.CallOption) (*MultResponse, error)
}

type addHelperClient struct {
	cc grpc.ClientConnInterface
}

func NewAddHelperClient(cc grpc.ClientConnInterface) AddHelperClient {
	return &addHelperClient{cc}
}

func (c *addHelperClient) Sum(ctx context.Context, in *MultRequest, opts ...grpc.CallOption) (*MultResponse, error) {
	out := new(MultResponse)
	err := c.cc.Invoke(ctx, "/protob.AddHelper/Sum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AddHelperServer is the server API for AddHelper service.
// All implementations should embed UnimplementedAddHelperServer
// for forward compatibility
type AddHelperServer interface {
	Sum(context.Context, *MultRequest) (*MultResponse, error)
}

// UnimplementedAddHelperServer should be embedded to have forward compatible implementations.
type UnimplementedAddHelperServer struct {
}

func (UnimplementedAddHelperServer) Sum(context.Context, *MultRequest) (*MultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sum not implemented")
}

// UnsafeAddHelperServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AddHelperServer will
// result in compilation errors.
type UnsafeAddHelperServer interface {
	mustEmbedUnimplementedAddHelperServer()
}

func RegisterAddHelperServer(s grpc.ServiceRegistrar, srv AddHelperServer) {
	s.RegisterService(&AddHelper_ServiceDesc, srv)
}

func _AddHelper_Sum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddHelperServer).Sum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protob.AddHelper/Sum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddHelperServer).Sum(ctx, req.(*MultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AddHelper_ServiceDesc is the grpc.ServiceDesc for AddHelper service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AddHelper_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protob.AddHelper",
	HandlerType: (*AddHelperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sum",
			Handler:    _AddHelper_Sum_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protob/kv.proto",
}
